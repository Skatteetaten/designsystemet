{"version":3,"file":"Table.test.stories-DYrSsBVy.js","sources":["../../../../apps/ds-playground/src/stories/__tests__/Table.test.stories.tsx"],"sourcesContent":["import {\n  ReactElement,\n  ReactNode,\n  RefAttributes,\n  useRef,\n  useState,\n} from 'react';\n\nimport { densityArr } from '@skatteetaten/ds-core-utils';\nimport { SortState, Table, TableProps } from '@skatteetaten/ds-table';\nimport { Heading } from '@skatteetaten/ds-typography';\nimport { Meta, StoryFn, StoryObj } from '@storybook/react';\nimport { expect, within } from '@storybook/test';\n\nimport { wrapper } from './testUtils/storybook.testing.utils';\n\nconst caption = 'tabellcaption';\nconst meta = {\n  component: Table,\n  title: 'Tester/Table/Table',\n  argTypes: {\n    // Baseprops\n    key: { table: { disable: true } },\n    ref: { table: { disable: true } },\n    className: { table: { disable: true } },\n    id: { table: { disable: true } },\n    lang: { table: { disable: true } },\n    'data-testid': { table: { disable: true } },\n    // Props\n    canBeManuallyFocused: { table: { disable: true } },\n    caption: { table: { disable: true } },\n    variant: {\n      table: { disable: true },\n      options: [...densityArr],\n      control: 'radio',\n    },\n    hasFullWidth: { table: { disable: true } },\n    showCaption: { table: { disable: true } },\n    sortState: { table: { disable: true } },\n    setSortState: { table: { disable: true } },\n    rowInEditModeId: { table: { disable: true } },\n    children: { table: { disable: true } },\n  },\n  args: {\n    caption: caption,\n  },\n} satisfies Meta<typeof Table>;\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nconst defaultArgs: TableProps = {\n  caption,\n};\n\nconst editableContent = (): ReactNode => (\n  <div className={'emptyExpandedTableRow'}></div>\n);\n\nconst ExpandEditSortTable = (\n  args: TableProps & RefAttributes<HTMLTableElement>\n): ReactElement => {\n  const [sortState, setSortState] = useState<SortState>({\n    direction: 'none',\n  });\n  const redigerDataRef = useRef<HTMLHeadingElement>(null);\n\n  const data = [\n    {\n      id: 's5f0e',\n      rowData: {\n        month: 'Januar',\n        amount: 5426,\n        coverage: '100 %',\n        revenue: 1000,\n      },\n    },\n    {\n      id: '3vesy',\n      rowData: {\n        month: 'Februar',\n        amount: 5432,\n        coverage: '50 %',\n        revenue: 500,\n      },\n    },\n    {\n      id: '16prz',\n      rowData: {\n        month: 'Mars',\n        amount: 4899,\n        coverage: '20 %',\n        revenue: 2000,\n      },\n    },\n    {\n      id: '3xpjb',\n      isExpandable: true,\n      rowData: {\n        month: 'April',\n        amount: 2344,\n        coverage: '30 %',\n        revenue: 1055,\n      },\n    },\n  ];\n\n  const sortedData = data.slice().sort((a, b) => {\n    const sortKey = sortState.sortKey as keyof (typeof data)[0]['rowData'];\n    const rowA = a.rowData;\n    const rowB = b.rowData;\n\n    if (!sortKey) {\n      return 0;\n    }\n    if (rowA[sortKey] === rowB[sortKey]) {\n      return 0;\n    }\n    if (sortState.direction === 'ascending') {\n      return rowA[sortKey] > rowB[sortKey] ? 1 : -1;\n    }\n    return rowA[sortKey] < rowB[sortKey] ? 1 : -1;\n  });\n\n  return (\n    <Table\n      {...args}\n      sortState={sortState}\n      setSortState={setSortState}\n      variant={args.variant}\n      caption={'Månedoversikt'}\n    >\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell as={'td'} />\n          <Table.HeaderCell scope={'col'} sortKey={'coverage'} isSortable>\n            {'Dekningsgrad'}\n          </Table.HeaderCell>\n          <Table.HeaderCell\n            alignment={'right'}\n            data-testid={'header-belop'}\n            scope={'col'}\n            sortKey={'amount'}\n            isSortable\n          >\n            {'Beløp'}\n          </Table.HeaderCell>\n          <Table.HeaderCell\n            alignment={'center'}\n            scope={'col'}\n            sortKey={'month'}\n            isSortable\n          >\n            {'Måned'}\n          </Table.HeaderCell>\n          <Table.HeaderCell\n            data-testid={'header-avkastning'}\n            alignment={'right'}\n            scope={'col'}\n            sortKey={'revenue'}\n            isSortable\n          >\n            {'Avkastning'}\n          </Table.HeaderCell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        {sortedData.map(({ isExpandable, id, rowData }, index) => {\n          const content = (\n            <>\n              <Table.DataCell alignment={'left'} id={id}>\n                {rowData.coverage}\n              </Table.DataCell>\n              <Table.DataCell alignment={'right'}>\n                {rowData.amount}\n              </Table.DataCell>\n              <Table.DataCell alignment={'center'}>\n                {rowData.month}\n              </Table.DataCell>\n              <Table.DataCell alignment={'right'}>\n                {rowData.revenue}\n              </Table.DataCell>\n            </>\n          );\n\n          if (isExpandable) {\n            return (\n              <Table.Row\n                key={id}\n                data-testid={`row-expand-${index}`}\n                expandButtonAriaDescribedby={id}\n                expandableContent={\n                  <div className={'emptyExpandedTableRow'}>\n                    <Heading ref={redigerDataRef} as={'h2'} level={2}>\n                      {'data'}\n                    </Heading>\n                  </div>\n                }\n                expandButtonPosition={'left'}\n                isExpandable\n              >\n                {content}\n              </Table.Row>\n            );\n          }\n\n          return (\n            <Table.EditableRow\n              key={index}\n              id={id}\n              data-testid={`row-${index}`}\n              editButtonAriaDescribedby={id}\n              editButtonPosition={'left'}\n              editableContent={editableContent}\n            >\n              {content}\n            </Table.EditableRow>\n          );\n        })}\n      </Table.Body>\n      <Table.Sum colSpan={4} hasTopSeparator>\n        {'4555'}\n      </Table.Sum>\n    </Table>\n  );\n};\n\nconst Template: StoryFn<typeof Table> = (args) => (\n  <Table {...args} variant={args.variant}>\n    <Table.Header>\n      <Table.Row>\n        <Table.HeaderCell scope={'col'}>{'Category'}</Table.HeaderCell>\n        <Table.HeaderCell scope={'col'}>{'Items'}</Table.HeaderCell>\n        <Table.HeaderCell scope={'col'}>{'Expenditure'}</Table.HeaderCell>\n      </Table.Row>\n    </Table.Header>\n    <Table.Body>\n      <Table.Row>\n        <Table.DataCell className={'rowSpanRight'} rowSpan={2}>\n          {'Edible'}\n        </Table.DataCell>\n        <Table.DataCell>{'Donuts'}</Table.DataCell>\n        <Table.DataCell>{'3,000'}</Table.DataCell>\n      </Table.Row>\n      <Table.Row>\n        <Table.DataCell>{'Cake'}</Table.DataCell>\n        <Table.DataCell>{'3,000'}</Table.DataCell>\n      </Table.Row>\n      <Table.Row>\n        <Table.DataCell rowSpan={2} className={'rowSpanRight'}>\n          {'Non-Edible'}\n        </Table.DataCell>\n        <Table.DataCell>{'Stationery'}</Table.DataCell>\n        <Table.DataCell>{'18,000'}</Table.DataCell>\n      </Table.Row>\n      <Table.Row>\n        <Table.DataCell>{'Batteries'}</Table.DataCell>\n        <Table.DataCell>{'9,000'}</Table.DataCell>\n      </Table.Row>\n    </Table.Body>\n    <Table.Sum colSpan={2}>{'32,000'}</Table.Sum>\n  </Table>\n);\n\nconst TemplateExpandEditSort: StoryFn<typeof Table> = (args) => (\n  <ExpandEditSortTable {...args} />\n);\n\nexport const WithRef = {\n  render: Template,\n  name: 'With Ref (FA1)',\n  args: {\n    ...defaultArgs,\n    ref: (instance: HTMLTableElement | null): void => {\n      if (instance) {\n        instance.id = 'dummyIdForwardedFromRef';\n      }\n    },\n  },\n  argTypes: {\n    ref: { table: { disable: false } },\n  },\n  parameters: {\n    imageSnapshot: { disable: true },\n  },\n  play: async ({ canvasElement }): Promise<void> => {\n    const canvas = within(canvasElement);\n    const table = canvas.getByRole('table');\n    await expect(table).toBeInTheDocument();\n    await expect(table).toHaveAttribute('id', 'dummyIdForwardedFromRef');\n  },\n} satisfies Story;\n\nexport const WithAttributes = {\n  render: Template,\n  name: 'With Attributes (FA2-5)',\n  args: {\n    ...defaultArgs,\n    id: 'htmlId',\n    className: 'dummyClassname',\n    lang: 'nb',\n    'data-testid': '123ID',\n  },\n  argTypes: {\n    id: { table: { disable: false } },\n    className: { table: { disable: false } },\n    lang: { table: { disable: false } },\n    'data-testid': { table: { disable: false } },\n  },\n  play: async ({ canvasElement }): Promise<void> => {\n    const canvas = within(canvasElement);\n    const table = canvas.getByRole('table');\n    await expect(table).toHaveClass('dummyClassname');\n    await expect(table).toHaveAttribute('id', 'htmlId');\n    await expect(table).toHaveAttribute('lang', 'nb');\n    await expect(table).toHaveAttribute('data-testid', '123ID');\n  },\n} satisfies Story;\n\nexport const Defaults = {\n  render: Template,\n  name: 'Defaults (Table A1, A8, B1, B2, TableRow B1, A20)',\n  args: {\n    ...defaultArgs,\n  },\n  play: async ({ canvasElement }): Promise<void> => {\n    const canvas = within(canvasElement);\n    await expect(canvas.getByText(caption)).toBeInTheDocument();\n    await expect(canvas.getByRole('table')).toBeInTheDocument();\n  },\n} satisfies Story;\n\nexport const WithVariantCompact = {\n  render: TemplateExpandEditSort,\n  name: 'Variant compact(Table A1, A3, TableHeader A2, TableRow A3, A17, A19, A20)',\n  args: {\n    ...defaultArgs,\n    variant: 'compact',\n  },\n  argTypes: {\n    variant: { table: { disable: false } },\n  },\n} satisfies Story;\n\nconst TemplateScroll: StoryFn<typeof Table> = (args) => {\n  const exampleTable = (\n    <Table {...args} variant={args.variant}>\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell scope={'col'}>{'Forename'}</Table.HeaderCell>\n          <Table.HeaderCell scope={'col'}>{'Surname'}</Table.HeaderCell>\n          <Table.HeaderCell scope={'col'}>{'email'}</Table.HeaderCell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        <Table.Row>\n          <Table.DataCell>{'Otto'}</Table.DataCell>\n          <Table.DataCell>{'Octavius'}</Table.DataCell>\n          <Table.DataCell>{'doc.ock@example.org'}</Table.DataCell>\n        </Table.Row>\n        <Table.Row>\n          <Table.DataCell>{'Norman'}</Table.DataCell>\n          <Table.DataCell>{'Osbourne'}</Table.DataCell>\n          <Table.DataCell>{'norman.osbourne@example.org'}</Table.DataCell>\n        </Table.Row>\n        <Table.Row>\n          <Table.DataCell>{'Curt'}</Table.DataCell>\n          <Table.DataCell>{'Connors'}</Table.DataCell>\n          <Table.DataCell>{'curt.connors@example.org'}</Table.DataCell>\n        </Table.Row>\n      </Table.Body>\n    </Table>\n  );\n\n  return (\n    <>\n      <p>{'Table med Scrollbar'}</p>\n      <div className={'scrollTableWrapper'}>{exampleTable}</div>\n      <div className={'scrollTableWrapperSuccess'}>{exampleTable}</div>\n      <div className={'scrollTableWrapperWarning'}>{exampleTable}</div>\n    </>\n  );\n};\n\nexport const WithScrollbar = {\n  render: TemplateScroll,\n  name: 'With scroll (A5)',\n  parameters: { a11y: { disable: true } },\n} satisfies Story;\n\nconst TemplateAlignment: StoryFn<typeof Table> = (args) => (\n  <Table {...args} variant={'standard'}>\n    <Table.Header>\n      <Table.Row>\n        <Table.HeaderCell alignment={'left'} scope={'col'}>\n          {'left'}\n        </Table.HeaderCell>\n        <Table.HeaderCell alignment={'center'} scope={'col'}>\n          {'center'}\n        </Table.HeaderCell>\n        <Table.HeaderCell alignment={'right'} scope={'col'}>\n          {'right'}\n        </Table.HeaderCell>\n        <Table.HeaderCell scope={'col'}>{'default'}</Table.HeaderCell>\n        <Table.HeaderCell alignment={'right'} scope={'col'}>\n          {'right'}\n        </Table.HeaderCell>\n      </Table.Row>\n    </Table.Header>\n    <Table.Body>\n      <Table.Row>\n        <Table.DataCell alignment={'left'}>{'left'}</Table.DataCell>\n        <Table.DataCell alignment={'center'}>{'center'}</Table.DataCell>\n        <Table.DataCell alignment={'right'}>{'right'}</Table.DataCell>\n        <Table.DataCell>{'default'}</Table.DataCell>\n        <Table.DataCell alignment={'left'}>{'left'}</Table.DataCell>\n      </Table.Row>\n      <Table.Row>\n        <Table.DataCell alignment={'left'}>{'left'}</Table.DataCell>\n        <Table.DataCell alignment={'center'}>{'center'}</Table.DataCell>\n        <Table.DataCell alignment={'right'}>{'right'}</Table.DataCell>\n        <Table.DataCell>{'default'}</Table.DataCell>\n        <Table.DataCell alignment={'right'}>{'right'}</Table.DataCell>\n      </Table.Row>\n    </Table.Body>\n  </Table>\n);\n\nexport const WithFullWidthAndTextAlignment = {\n  render: TemplateAlignment,\n  name: 'With Full Width, text Alignment (Table A4, A10, TableHeader A1, TableRow A2)',\n  args: {\n    ...defaultArgs,\n    hasFullWidth: true,\n  },\n} satisfies Story;\n\nexport const WithExpandEditSort = {\n  render: TemplateExpandEditSort,\n  name: 'With Expand Edit Sort (Table A9, A11, A14, A15, TableHeader A4, A5, A6, A7, B2, TableRow B3, A14, A15, A19)',\n  args: {\n    ...defaultArgs,\n  },\n  parameters: {\n    imageSnapshot: {\n      hover: [\n        `${wrapper} [data-testid=\"row-0\"]`,\n        `${wrapper} [data-testid=\"header-belop\"] button`,\n      ],\n      focus: [\n        `${wrapper} [data-testid=\"header-belop\"] button`,\n        `${wrapper} [data-testid=\"row-0\"] button`,\n      ],\n      click: [\n        `${wrapper} [data-testid=\"row-0\"] button`,\n        `${wrapper} [data-testid=\"row-expand-3\"] button`,\n        `${wrapper} [data-testid=\"header-belop\"] button`,\n        `${wrapper} [data-testid=\"header-belop\"] button`,\n        `${wrapper} [data-testid=\"header-avkastning\"] button`,\n      ],\n    },\n  },\n} satisfies Story;\n\nexport const WithDefaultRowInEditMode = {\n  render: TemplateExpandEditSort,\n  name: 'With Default Row In Edit Mode',\n  args: {\n    ...defaultArgs,\n    rowInEditModeId: '3vesy',\n  },\n} satisfies Story;\n\nexport const WithWideScreen = {\n  render: TemplateExpandEditSort,\n  name: 'With Wide screen (Table A1, A2)',\n  args: {\n    ...defaultArgs,\n  },\n  parameters: {\n    viewport: {\n      defaultViewport: '--breakpoint-m',\n    },\n  },\n} satisfies Story;\n\nexport const WithFullWidthExpandableEdit = {\n  render: TemplateExpandEditSort,\n  name: 'With FullWidth Edit Expand Sort',\n  args: {\n    ...defaultArgs,\n    hasFullWidth: true,\n  },\n} satisfies Story;\n\nexport const WithCanBeManuallyFocused: Story = {\n  render: Template,\n  args: {\n    ...defaultArgs,\n    canBeManuallyFocused: true,\n  },\n  argTypes: {\n    canBeManuallyFocused: { table: { disable: false } },\n  },\n  play: async ({ canvasElement }): Promise<void> => {\n    const canvas = within(canvasElement);\n    const table = canvas.getByRole('table');\n    table.focus();\n    await expect(table).toBeInTheDocument();\n    await expect(table).toHaveAttribute('tabIndex', '-1');\n  },\n} satisfies Story;\n"],"names":["caption","meta","component","Table","title","argTypes","key","table","disable","ref","className","id","lang","canBeManuallyFocused","variant","options","densityArr","control","hasFullWidth","showCaption","sortState","setSortState","rowInEditModeId","children","args","defaultArgs","editableContent","jsx","ExpandEditSortTable","useState","direction","redigerDataRef","useRef","sortedData","rowData","month","amount","coverage","revenue","isExpandable","slice","sort","a","b","sortKey","rowA","rowB","jsxs","map","index","content","Fragment","Heading","Template","TemplateExpandEditSort","WithRef","render","name","instance","parameters","imageSnapshot","play","canvasElement","within","getByRole","expect","toBeInTheDocument","toHaveAttribute","WithAttributes","toHaveClass","Defaults","canvas","getByText","WithVariantCompact","TemplateScroll","exampleTable","WithScrollbar","a11y","TemplateAlignment","WithFullWidthAndTextAlignment","WithExpandEditSort","hover","wrapper","focus","click","WithDefaultRowInEditMode","WithWideScreen","viewport","defaultViewport","WithFullWidthExpandableEdit","WithCanBeManuallyFocused","docs","source","originalSource"],"mappings":"2dAgBA,MAAMA,EAAU,gBACVC,GAAO,CACXC,UAAWC,EACXC,MAAO,qBACPC,SAAU,CAERC,IAAK,CAAEC,MAAO,CAAEC,QAAS,EAAA,CAAO,EAChCC,IAAK,CAAEF,MAAO,CAAEC,QAAS,EAAA,CAAO,EAChCE,UAAW,CAAEH,MAAO,CAAEC,QAAS,EAAA,CAAO,EACtCG,GAAI,CAAEJ,MAAO,CAAEC,QAAS,EAAA,CAAO,EAC/BI,KAAM,CAAEL,MAAO,CAAEC,QAAS,EAAA,CAAO,EACjC,cAAe,CAAED,MAAO,CAAEC,QAAS,EAAA,CAAO,EAE1CK,qBAAsB,CAAEN,MAAO,CAAEC,QAAS,EAAA,CAAO,EACjDR,QAAS,CAAEO,MAAO,CAAEC,QAAS,EAAA,CAAO,EACpCM,QAAS,CACPP,MAAO,CAAEC,QAAS,EAAK,EACvBO,QAAS,CAAC,GAAGC,EAAU,EACvBC,QAAS,OACX,EACAC,aAAc,CAAEX,MAAO,CAAEC,QAAS,EAAA,CAAO,EACzCW,YAAa,CAAEZ,MAAO,CAAEC,QAAS,EAAA,CAAO,EACxCY,UAAW,CAAEb,MAAO,CAAEC,QAAS,EAAA,CAAO,EACtCa,aAAc,CAAEd,MAAO,CAAEC,QAAS,EAAA,CAAO,EACzCc,gBAAiB,CAAEf,MAAO,CAAEC,QAAS,EAAA,CAAO,EAC5Ce,SAAU,CAAEhB,MAAO,CAAEC,QAAS,EAAA,CAAK,CACrC,EACAgB,KAAM,CACJxB,QAAAA,CAAAA,CAEJ,EAIMyB,EAA0B,CAC9BzB,QAAAA,CACF,EAEM0B,GAAkBA,IACrBC,EAAAA,IAAA,MAAA,CAAI,UAAW,uBAAyB,CAAA,EAGrCC,GACJJ,GACiB,CACjB,KAAM,CAACJ,EAAWC,CAAY,EAAIQ,WAAoB,CACpDC,UAAW,MAAA,CACZ,EACKC,GAAiBC,SAA2B,IAAI,EA0ChDC,GAxCO,CACX,CACEtB,GAAI,QACJuB,QAAS,CACPC,MAAO,SACPC,OAAQ,KACRC,SAAU,QACVC,QAAS,GAAA,CACX,EAEF,CACE3B,GAAI,QACJuB,QAAS,CACPC,MAAO,UACPC,OAAQ,KACRC,SAAU,OACVC,QAAS,GAAA,CACX,EAEF,CACE3B,GAAI,QACJuB,QAAS,CACPC,MAAO,OACPC,OAAQ,KACRC,SAAU,OACVC,QAAS,GAAA,CACX,EAEF,CACE3B,GAAI,QACJ4B,aAAc,GACdL,QAAS,CACPC,MAAO,QACPC,OAAQ,KACRC,SAAU,OACVC,QAAS,IAAA,CACX,CACD,EAGqBE,MAAAA,EAAQC,KAAK,CAACC,EAAGC,IAAM,CAC7C,MAAMC,EAAUxB,EAAUwB,QACpBC,EAAOH,EAAER,QACTY,EAAOH,EAAET,QAKf,MAHI,CAACU,GAGDC,EAAKD,CAAO,IAAME,EAAKF,CAAO,EACzB,EAELxB,EAAUU,YAAc,YACnBe,EAAKD,CAAO,EAAIE,EAAKF,CAAO,EAAI,EAAI,GAEtCC,EAAKD,CAAO,EAAIE,EAAKF,CAAO,EAAI,EAAI,EAAA,CAC5C,EAGC,OAAAG,EAAA,KAAC5C,EACKqB,CAAAA,GAAAA,EACJ,UAAAJ,EACA,aAAAC,EACA,QAASG,EAAKV,QACd,QAAS,gBAET,SAAA,CAAAa,MAACxB,EAAM,OAAN,CACC,SAAC4C,EAAAA,KAAA5C,EAAM,IAAN,CACC,SAAA,CAAAwB,EAAAA,IAACxB,EAAM,WAAN,CAAiB,GAAI,IAAK,CAAA,EAC3BwB,EAAAA,IAACxB,EAAM,WAAN,CAAiB,MAAO,MAAO,QAAS,WAAY,WAAU,GAC5D,SACH,cAAA,CAAA,EACCwB,EAAA,IAAAxB,EAAM,WAAN,CACC,UAAW,QACX,cAAa,eACb,MAAO,MACP,QAAS,SACT,WAAS,GAER,SACH,QAAA,EACCwB,EAAAA,IAAAxB,EAAM,WAAN,CACC,UAAW,SACX,MAAO,MACP,QAAS,QACT,WAAS,GAER,SACH,OAAA,CAAA,EACCwB,EAAA,IAAAxB,EAAM,WAAN,CACC,cAAa,oBACb,UAAW,QACX,MAAO,MACP,QAAS,UACT,WAAS,GAER,SACH,YAAA,CAAA,CAAA,CAAA,CACF,CACF,CAAA,QACCA,EAAM,KAAN,CACE8B,SAAAA,GAAWe,IAAI,CAAC,CAAET,aAAAA,EAAc5B,GAAAA,EAAIuB,QAAAA,GAAWe,IAAU,CACxD,MAAMC,EAEFH,EAAAA,KAAAI,EAAA,SAAA,CAAA,SAAA,CAAAxB,MAACxB,EAAM,SAAN,CAAe,UAAW,OAAQ,GAAAQ,EAChCuB,WAAQG,SACX,QACClC,EAAM,SAAN,CAAe,UAAW,QACxB+B,WAAQE,OACX,QACCjC,EAAM,SAAN,CAAe,UAAW,SACxB+B,WAAQC,MACX,QACChC,EAAM,SAAN,CAAe,UAAW,QACxB+B,WAAQI,OACX,CAAA,CAAA,EACF,EAGF,OAAIC,EAECZ,EAAAA,IAAAxB,EAAM,IAAN,CAEC,cAAa,cAAc8C,CAAK,GAChC,4BAA6BtC,EAC7B,kBACEgB,MAAC,OAAI,UAAW,wBACd,SAACA,EAAA,IAAAyB,GAAA,CAAQ,IAAKrB,GAAgB,GAAI,KAAM,MAAO,EAC5C,SAAA,MAAA,CACH,CACF,CAAA,EAEF,qBAAsB,OACtB,aAAW,GAEVmB,YAbIvC,CAcP,EAKDgB,EAAAA,IAAAxB,EAAM,YAAN,CAEC,GAAAQ,EACA,cAAa,OAAOsC,CAAK,GACzB,0BAA2BtC,EAC3B,mBAAoB,OACpB,gBAAAe,GAECwB,YAPID,CAQP,CAEH,CAAA,EACH,EACAtB,MAACxB,EAAM,IAAN,CAAU,QAAS,EAAG,gBAAe,GACnC,SACH,MAAA,CAAA,CAAA,EACF,CAEJ,EAEMkD,KACHN,EAAA,KAAA5C,EAAA,CAAM,GAAIqB,EAAM,QAASA,EAAKV,QAC7B,SAAA,CAAAa,MAACxB,EAAM,OAAN,CACC,SAAC4C,EAAAA,KAAA5C,EAAM,IAAN,CACC,SAAA,CAAAwB,EAAA,IAACxB,EAAM,WAAN,CAAiB,MAAO,MAAQ,SAAW,WAAA,QAC3CA,EAAM,WAAN,CAAiB,MAAO,MAAQ,SAAQ,QAAA,QACxCA,EAAM,WAAN,CAAiB,MAAO,MAAQ,SAAc,aAAA,CAAA,CAAA,CAAA,CACjD,CACF,CAAA,EACA4C,EAAAA,KAAC5C,EAAM,KAAN,CACC,SAAA,CAAC4C,EAAAA,KAAA5C,EAAM,IAAN,CACC,SAAA,CAAAwB,MAACxB,EAAM,SAAN,CAAe,UAAW,eAAgB,QAAS,EACjD,SACH,SAAA,EACCwB,EAAAA,IAAAxB,EAAM,SAAN,CAAgB,SAAS,QAAA,CAAA,EACzBwB,EAAAA,IAAAxB,EAAM,SAAN,CAAgB,SAAQ,OAAA,CAAA,CAAA,EAC3B,EACA4C,EAAAA,KAAC5C,EAAM,IAAN,CACC,SAAA,CAACwB,EAAAA,IAAAxB,EAAM,SAAN,CAAgB,SAAO,MAAA,CAAA,EACvBwB,EAAAA,IAAAxB,EAAM,SAAN,CAAgB,SAAQ,OAAA,CAAA,CAAA,EAC3B,EACA4C,EAAAA,KAAC5C,EAAM,IAAN,CACC,SAAA,CAAAwB,MAACxB,EAAM,SAAN,CAAe,QAAS,EAAG,UAAW,eACpC,SACH,aAAA,EACCwB,EAAAA,IAAAxB,EAAM,SAAN,CAAgB,SAAa,YAAA,CAAA,EAC7BwB,EAAAA,IAAAxB,EAAM,SAAN,CAAgB,SAAS,QAAA,CAAA,CAAA,EAC5B,EACA4C,EAAAA,KAAC5C,EAAM,IAAN,CACC,SAAA,CAACwB,EAAAA,IAAAxB,EAAM,SAAN,CAAgB,SAAY,WAAA,CAAA,EAC5BwB,EAAAA,IAAAxB,EAAM,SAAN,CAAgB,SAAQ,OAAA,CAAA,CAAA,CAC3B,CAAA,CAAA,EACF,QACCA,EAAM,IAAN,CAAU,QAAS,EAAI,SAAS,QAAA,CAAA,CAAA,EACnC,EAGImD,EAAiD9B,GACpDG,EAAAA,IAAAC,GAAA,CAAwBJ,GAAAA,EAC1B,EAEY+B,EAAU,CACrBC,OAAQH,EACRI,KAAM,iBACNjC,KAAM,CACJ,GAAGC,EACHhB,IAAMiD,GAA4C,CAC5CA,IACFA,EAAS/C,GAAK,0BAChB,CAEJ,EACAN,SAAU,CACRI,IAAK,CAAEF,MAAO,CAAEC,QAAS,EAAA,CAAM,CACjC,EACAmD,WAAY,CACVC,cAAe,CAAEpD,QAAS,EAAA,CAC5B,EACAqD,KAAM,MAAO,CAAEC,cAAAA,CAAAA,IAAmC,CAE1CvD,MAAAA,EADSwD,EAAOD,CAAa,EACdE,UAAU,OAAO,EAChCC,MAAAA,EAAO1D,CAAK,EAAE2D,kBAAkB,EACtC,MAAMD,EAAO1D,CAAK,EAAE4D,gBAAgB,KAAM,yBAAyB,CAAA,CAEvE,EAEaC,EAAiB,CAC5BZ,OAAQH,EACRI,KAAM,0BACNjC,KAAM,CACJ,GAAGC,EACHd,GAAI,SACJD,UAAW,iBACXE,KAAM,KACN,cAAe,OACjB,EACAP,SAAU,CACRM,GAAI,CAAEJ,MAAO,CAAEC,QAAS,EAAA,CAAQ,EAChCE,UAAW,CAAEH,MAAO,CAAEC,QAAS,EAAA,CAAQ,EACvCI,KAAM,CAAEL,MAAO,CAAEC,QAAS,EAAA,CAAQ,EAClC,cAAe,CAAED,MAAO,CAAEC,QAAS,EAAA,CAAM,CAC3C,EACAqD,KAAM,MAAO,CAAEC,cAAAA,CAAAA,IAAmC,CAE1CvD,MAAAA,EADSwD,EAAOD,CAAa,EACdE,UAAU,OAAO,EACtC,MAAMC,EAAO1D,CAAK,EAAE8D,YAAY,gBAAgB,EAChD,MAAMJ,EAAO1D,CAAK,EAAE4D,gBAAgB,KAAM,QAAQ,EAClD,MAAMF,EAAO1D,CAAK,EAAE4D,gBAAgB,OAAQ,IAAI,EAChD,MAAMF,EAAO1D,CAAK,EAAE4D,gBAAgB,cAAe,OAAO,CAAA,CAE9D,EAEaG,EAAW,CACtBd,OAAQH,EACRI,KAAM,oDACNjC,KAAM,CACJ,GAAGC,CACL,EACAoC,KAAM,MAAO,CAAEC,cAAAA,CAAAA,IAAmC,CAC1CS,MAAAA,EAASR,EAAOD,CAAa,EACnC,MAAMG,EAAOM,EAAOC,UAAUxE,CAAO,CAAC,EAAEkE,kBAAkB,EAC1D,MAAMD,EAAOM,EAAOP,UAAU,OAAO,CAAC,EAAEE,kBAAkB,CAAA,CAE9D,EAEaO,EAAqB,CAChCjB,OAAQF,EACRG,KAAM,4EACNjC,KAAM,CACJ,GAAGC,EACHX,QAAS,SACX,EACAT,SAAU,CACRS,QAAS,CAAEP,MAAO,CAAEC,QAAS,EAAA,CAAM,CAAE,CAEzC,EAEMkE,GAAkDlD,GAAA,CACtD,MAAMmD,EACH5B,OAAA5C,EAAA,CAAUqB,GAAAA,EAAM,QAASA,EAAKV,QAC7B,SAAA,CAAAa,MAACxB,EAAM,OAAN,CACC,SAAC4C,EAAAA,KAAA5C,EAAM,IAAN,CACC,SAAA,CAAAwB,EAAA,IAACxB,EAAM,WAAN,CAAiB,MAAO,MAAQ,SAAW,WAAA,QAC3CA,EAAM,WAAN,CAAiB,MAAO,MAAQ,SAAU,UAAA,QAC1CA,EAAM,WAAN,CAAiB,MAAO,MAAQ,SAAQ,OAAA,CAAA,CAAA,CAAA,CAC3C,CACF,CAAA,EACA4C,EAAAA,KAAC5C,EAAM,KAAN,CACC,SAAA,CAAC4C,EAAAA,KAAA5C,EAAM,IAAN,CACC,SAAA,CAACwB,EAAAA,IAAAxB,EAAM,SAAN,CAAgB,SAAO,MAAA,CAAA,EACvBwB,EAAAA,IAAAxB,EAAM,SAAN,CAAgB,SAAW,UAAA,CAAA,EAC3BwB,EAAAA,IAAAxB,EAAM,SAAN,CAAgB,SAAsB,qBAAA,CAAA,CAAA,EACzC,EACA4C,EAAAA,KAAC5C,EAAM,IAAN,CACC,SAAA,CAACwB,EAAAA,IAAAxB,EAAM,SAAN,CAAgB,SAAS,QAAA,CAAA,EACzBwB,EAAAA,IAAAxB,EAAM,SAAN,CAAgB,SAAW,UAAA,CAAA,EAC3BwB,EAAAA,IAAAxB,EAAM,SAAN,CAAgB,SAA8B,6BAAA,CAAA,CAAA,EACjD,EACA4C,EAAAA,KAAC5C,EAAM,IAAN,CACC,SAAA,CAACwB,EAAAA,IAAAxB,EAAM,SAAN,CAAgB,SAAO,MAAA,CAAA,EACvBwB,EAAAA,IAAAxB,EAAM,SAAN,CAAgB,SAAU,SAAA,CAAA,EAC1BwB,EAAAA,IAAAxB,EAAM,SAAN,CAAgB,SAA2B,0BAAA,CAAA,CAAA,CAC9C,CAAA,CAAA,CACF,CAAA,CAAA,EACF,EAGF,OAEI4C,EAAA,KAAAI,WAAA,CAAA,SAAA,CAAAxB,EAAAA,IAAC,KAAG,SAAsB,qBAAA,CAAA,EACzBA,EAAA,IAAA,MAAA,CAAI,UAAW,qBAAuBgD,SAAaA,EAAA,EACnDhD,EAAA,IAAA,MAAA,CAAI,UAAW,4BAA8BgD,SAAaA,EAAA,EAC1DhD,EAAA,IAAA,MAAA,CAAI,UAAW,4BAA8BgD,SAAaA,CAAA,CAAA,CAAA,EAC7D,CAEJ,EAEaC,EAAgB,CAC3BpB,OAAQkB,GACRjB,KAAM,mBACNE,WAAY,CAAEkB,KAAM,CAAErE,QAAS,EAAA,CAAK,CACtC,EAEMsE,GACJtD,GAAAuB,EAAAA,KAAC5C,MAAUqB,EAAM,QAAS,WACxB,SAAA,CAAAG,MAACxB,EAAM,OAAN,CACC,SAAC4C,EAAAA,KAAA5C,EAAM,IAAN,CACC,SAAA,CAAAwB,MAACxB,EAAM,WAAN,CAAiB,UAAW,OAAQ,MAAO,MACzC,SACH,OAAA,EACAwB,MAACxB,EAAM,WAAN,CAAiB,UAAW,SAAU,MAAO,MAC3C,SACH,SAAA,EACAwB,MAACxB,EAAM,WAAN,CAAiB,UAAW,QAAS,MAAO,MAC1C,SACH,QAAA,QACCA,EAAM,WAAN,CAAiB,MAAO,MAAQ,SAAU,UAAA,EAC3CwB,MAACxB,EAAM,WAAN,CAAiB,UAAW,QAAS,MAAO,MAC1C,SACH,OAAA,CAAA,CAAA,CAAA,CACF,CACF,CAAA,EACA4C,EAAAA,KAAC5C,EAAM,KAAN,CACC,SAAA,CAAC4C,EAAAA,KAAA5C,EAAM,IAAN,CACC,SAAA,CAAAwB,EAAA,IAACxB,EAAM,SAAN,CAAe,UAAW,OAAS,SAAO,OAAA,QAC1CA,EAAM,SAAN,CAAe,UAAW,SAAW,SAAS,SAAA,QAC9CA,EAAM,SAAN,CAAe,UAAW,QAAU,SAAQ,QAAA,EAC5CwB,EAAAA,IAAAxB,EAAM,SAAN,CAAgB,SAAU,SAAA,CAAA,QAC1BA,EAAM,SAAN,CAAe,UAAW,OAAS,SAAO,MAAA,CAAA,CAAA,EAC7C,EACA4C,EAAAA,KAAC5C,EAAM,IAAN,CACC,SAAA,CAAAwB,EAAA,IAACxB,EAAM,SAAN,CAAe,UAAW,OAAS,SAAO,OAAA,QAC1CA,EAAM,SAAN,CAAe,UAAW,SAAW,SAAS,SAAA,QAC9CA,EAAM,SAAN,CAAe,UAAW,QAAU,SAAQ,QAAA,EAC5CwB,EAAAA,IAAAxB,EAAM,SAAN,CAAgB,SAAU,SAAA,CAAA,QAC1BA,EAAM,SAAN,CAAe,UAAW,QAAU,SAAQ,OAAA,CAAA,CAAA,CAC/C,CAAA,CAAA,CACF,CAAA,CAAA,EACF,EAGW4E,EAAgC,CAC3CvB,OAAQsB,GACRrB,KAAM,+EACNjC,KAAM,CACJ,GAAGC,EACHP,aAAc,EAAA,CAElB,EAEa8D,EAAqB,CAChCxB,OAAQF,EACRG,KAAM,8GACNjC,KAAM,CACJ,GAAGC,CACL,EACAkC,WAAY,CACVC,cAAe,CACbqB,MAAO,CACL,GAAGC,CAAO,yBACV,GAAGA,CAAO,sCAAsC,EAElDC,MAAO,CACL,GAAGD,CAAO,uCACV,GAAGA,CAAO,+BAA+B,EAE3CE,MAAO,CACL,GAAGF,CAAO,gCACV,GAAGA,CAAO,uCACV,GAAGA,CAAO,uCACV,GAAGA,CAAO,uCACV,GAAGA,CAAO,2CAA2C,CAAA,CAEzD,CAEJ,EAEaG,EAA2B,CACtC7B,OAAQF,EACRG,KAAM,gCACNjC,KAAM,CACJ,GAAGC,EACHH,gBAAiB,OAAA,CAErB,EAEagE,EAAiB,CAC5B9B,OAAQF,EACRG,KAAM,kCACNjC,KAAM,CACJ,GAAGC,CACL,EACAkC,WAAY,CACV4B,SAAU,CACRC,gBAAiB,gBAAA,CACnB,CAEJ,EAEaC,EAA8B,CACzCjC,OAAQF,EACRG,KAAM,kCACNjC,KAAM,CACJ,GAAGC,EACHP,aAAc,EAAA,CAElB,EAEawE,EAAkC,CAC7ClC,OAAQH,EACR7B,KAAM,CACJ,GAAGC,EACHZ,qBAAsB,EACxB,EACAR,SAAU,CACRQ,qBAAsB,CAAEN,MAAO,CAAEC,QAAS,EAAA,CAAM,CAClD,EACAqD,KAAM,MAAO,CAAEC,cAAAA,CAAAA,IAAmC,CAE1CvD,MAAAA,EADSwD,EAAOD,CAAa,EACdE,UAAU,OAAO,EACtCzD,EAAM4E,MAAM,EACNlB,MAAAA,EAAO1D,CAAK,EAAE2D,kBAAkB,EACtC,MAAMD,EAAO1D,CAAK,EAAE4D,gBAAgB,WAAY,IAAI,CAAA,CAExD,YAAiBZ,EAAAI,WAAA,CAAA,GAAAJ,EAAAI,WAAAgC,KAAA,CAAA,IAAApC,EAAAA,EAAAI,aAAAJ,YAAAA,EAAAoC,KAAAC,OAAA,CAAAC,eAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAA,IAAAtC,GAAAA,EAAAA,EAAAI,aAAAJ,YAAAA,EAAAoC,OAAApC,YAAAA,EAAAqC,MAAAA,CAAA,CAAA,YAAAxB,EAAAT,WAAA,CAAA,GAAAS,EAAAT,WAAAgC,KAAA,CAAA,IAAAvB,EAAAA,EAAAT,aAAAS,YAAAA,EAAAuB,KAAAC,OAAA,CAAAC,eAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAA,IAAAzB,GAAAA,EAAAA,EAAAT,aAAAS,YAAAA,EAAAuB,OAAAvB,YAAAA,EAAAwB,MAAAA,CAAA,CAAA,YAAAtB,EAAAX,WAAA,CAAA,GAAAW,EAAAX,WAAAgC,KAAA,CAAA,IAAArB,EAAAA,EAAAX,aAAAW,YAAAA,EAAAqB,KAAAC,OAAA,CAAAC,eAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAA,IAAAvB,GAAAA,EAAAA,EAAAX,aAAAW,YAAAA,EAAAqB,OAAArB,YAAAA,EAAAsB,MAAAA,CAAA,CAAA,YAAAnB,EAAAd,WAAA,CAAA,GAAAc,EAAAd,WAAAgC,KAAA,CAAA,IAAAlB,EAAAA,EAAAd,aAAAc,YAAAA,EAAAkB,KAAAC,OAAA,CAAAC,eAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAA,IAAApB,GAAAA,EAAAA,EAAAd,aAAAc,YAAAA,EAAAkB,OAAAlB,YAAAA,EAAAmB,MAAAA,CAAA,CAAA,YAAAhB,EAAAjB,WAAA,CAAA,GAAAiB,EAAAjB,WAAAgC,KAAA,CAAA,IAAAf,EAAAA,EAAAjB,aAAAiB,YAAAA,EAAAe,KAAAC,OAAA,CAAAC,eAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAA,IAAAjB,GAAAA,EAAAA,EAAAjB,aAAAiB,YAAAA,EAAAe,OAAAf,YAAAA,EAAAgB,MAAAA,CAAA,CAAA,YAAAb,EAAApB,WAAA,CAAA,GAAAoB,EAAApB,WAAAgC,KAAA,CAAA,IAAAZ,EAAAA,EAAApB,aAAAoB,YAAAA,EAAAY,KAAAC,OAAA,CAAAC,eAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAA,IAAAd,GAAAA,EAAAA,EAAApB,aAAAoB,YAAAA,EAAAY,OAAAZ,YAAAA,EAAAa,MAAAA,CAAA,CAAA,YAAAZ,EAAArB,WAAA,CAAA,GAAAqB,EAAArB,WAAAgC,KAAA,CAAA,IAAAX,EAAAA,EAAArB,aAAAqB,YAAAA,EAAAW,KAAAC,OAAA,CAAAC,eAAA,suBAAA,IAAAb,GAAAA,EAAAA,EAAArB,aAAAqB,YAAAA,EAAAW,OAAAX,YAAAA,EAAAY,MAAAA,CAAA,CAAA,YAAAP,EAAA1B,WAAA,CAAA,GAAA0B,EAAA1B,WAAAgC,KAAA,CAAA,IAAAN,EAAAA,EAAA1B,aAAA0B,YAAAA,EAAAM,KAAAC,OAAA,CAAAC,eAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAA,IAAAR,GAAAA,EAAAA,EAAA1B,aAAA0B,YAAAA,EAAAM,OAAAN,YAAAA,EAAAO,MAAAA,CAAA,CAAA,cAAAN,EAAA3B,WAAA,CAAA,GAAA2B,EAAA3B,WAAAgC,KAAA,CAAA,IAAAL,EAAAA,EAAA3B,aAAA2B,YAAAA,EAAAK,KAAAC,OAAA,CAAAC,eAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAA,IAAAP,IAAAA,GAAAA,EAAA3B,aAAA2B,YAAAA,GAAAK,OAAAL,YAAAA,GAAAM,MAAAA,CAAA,CAAA,eAAAH,EAAA9B,WAAA,CAAA,GAAA8B,EAAA9B,WAAAgC,KAAA,CAAA,IAAAF,GAAAA,EAAA9B,aAAA8B,YAAAA,GAAAE,KAAAC,OAAA,CAAAC,eAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAA,IAAAJ,IAAAA,GAAAA,EAAA9B,aAAA8B,YAAAA,GAAAE,OAAAF,YAAAA,GAAAG,MAAAA,CAAA,CAAA,eAAAF,EAAA/B,WAAA,CAAA,GAAA+B,EAAA/B,WAAAgC,KAAA,CAAA,IAAAD,GAAAA,EAAA/B,aAAA+B,YAAAA,GAAAC,KAAAC,OAAA,CAAAC,eAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAA,IAAAH,IAAAA,GAAAA,EAAA/B,aAAA+B,YAAAA,GAAAC,OAAAD,YAAAA,GAAAE,MAAAA,CAAA,CAAA"}