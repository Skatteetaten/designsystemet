{"version":3,"file":"FileUploader.stories-BiXaZu3Y.js","sources":["../../../../apps/ds-playground/src/stories/components/FileUploader.stories.tsx"],"sourcesContent":["import { useState, JSX } from 'react';\n\nimport { StoryObj, Meta } from '@storybook/react';\n\nimport { dsI18n } from '@skatteetaten/ds-core-utils';\nimport { Checkbox, FileUploader, UploadedFile } from '@skatteetaten/ds-forms';\n\nimport { category } from '../../../.storybook/helpers';\nimport { SystemSVGPaths } from '../utils/icon.systems';\nimport { exampleParameters } from '../utils/stories.utils';\n\nconst meta = {\n  component: FileUploader,\n  title: 'Komponenter/FileUploader',\n  argTypes: {\n    // Props\n    classNames: { table: { category: category.props } },\n    acceptedFileFormatsDisplay: { table: { category: category.props } },\n    description: { table: { category: category.props } },\n    fileIconTitle: { table: { category: category.props } },\n    errorMessage: { table: { category: category.props } },\n    helpSvgPath: {\n      options: Object.keys(SystemSVGPaths),\n      mapping: SystemSVGPaths,\n      table: {\n        category: category.props,\n        defaultValue: { summary: 'HelpSimpleSVGpath' },\n      },\n    },\n    helpText: { table: { category: category.props } },\n    hideLabel: { table: { category: category.props } },\n    invalidCharacterRegexp: {\n      control: 'text',\n      table: { category: category.props },\n    },\n    isUploading: { table: { category: category.props } },\n    label: { table: { category: category.props } },\n    acceptedFileFormats: { table: { category: category.props } },\n    shouldNormalizeFileName: { table: { category: category.props } },\n    showRequiredMark: { table: { category: category.props } },\n    successIconTitle: { table: { category: category.props } },\n    titleHelpSvg: {\n      table: {\n        category: category.props,\n        defaultValue: { summary: dsI18n.t('Shared:shared.Help') },\n      },\n    },\n    uploadedFiles: { table: { category: category.props } },\n    uploadResult: { table: { category: category.props } },\n    // HTML\n    multiple: { table: { category: category.htmlAttribute } },\n    children: { table: { category: category.props } },\n    acceptedFileFormatsDescription: { table: { category: category.props } },\n    // Events\n    onFileDelete: { table: { category: category.event } },\n    onFileDownload: { table: { category: category.event } },\n    onFileChange: { table: { category: category.event } },\n    onHelpToggle: { table: { category: category.event } },\n  },\n  args: {\n    helpText: 'Hjelpetekst',\n    label: 'Ledetekst',\n    acceptedFileFormats: ['.pdf', '.jpeg'],\n    uploadedFiles: [\n      { name: 'test.pdf', href: 'https://i.imgur.com/guZeGcr.png' },\n      { name: 'test.jpg' },\n      {\n        name: 'test.png',\n        href: 'http://localhost:4400/designsystem_illustrasjon.png',\n      },\n    ],\n    onFileDelete: (file: UploadedFile): boolean => {\n      console.log(file);\n\n      return true;\n    },\n  },\n} satisfies Meta<typeof FileUploader>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Preview: Story = {} satisfies Story;\n\nasync function mockFetch(feil?: boolean): Promise<Response> {\n  await new Promise((r) => setTimeout(r, 500));\n\n  if (feil) {\n    return Response.json({}, { status: 400 });\n  } else {\n    return Response.json({});\n  }\n}\nfunction mockUpload(_any: File, feil: boolean): Promise<Response> {\n  return mockFetch(feil);\n}\nfunction mockDelete(_any: unknown, feil: boolean): Promise<Response> {\n  return mockFetch(feil);\n}\n\nexport const SimpleCompleteExample: Story = {\n  render: (_args): JSX.Element => {\n    const [fileUploaderState, setSuccess, setLoading, setFailure, remove] =\n      FileUploader.useFileUploader();\n\n    const [shouldError, setShouldError] = useState(false);\n\n    const [errorMessage, setErrorMessage] = useState('');\n\n    const onDelete = async (file: UploadedFile): Promise<boolean> => {\n      const response = await mockDelete(file.name, shouldError);\n      if (response.ok) {\n        remove(file);\n        return true;\n      } else {\n        return false;\n      }\n    };\n\n    const onChange = async (files: File[]): Promise<boolean> => {\n      if (fileUploaderState.uploadedFiles.length > 0) {\n        setErrorMessage(\n          'Du har allerede lastet opp en fil. Fjern filen først om du ønsker å laste opp en annen fil i stedet'\n        );\n        return Promise.reject();\n      }\n      if (files.length > 1) {\n        setErrorMessage(\n          'Det er ikke lov med flere filer (dette kan bare skje med drag and drop)'\n        );\n        return Promise.reject();\n      }\n\n      setLoading();\n\n      const response = await mockUpload(files[0], shouldError);\n\n      if (!response.ok) {\n        setFailure(files, [\n          {\n            error: 'det har skjedd noe feil',\n            files: [\n              {\n                name: files[0].name,\n              },\n            ],\n          },\n        ]);\n        return false;\n      } else {\n        setSuccess(files);\n        return true;\n      }\n    };\n\n    return (\n      <>\n        <Checkbox\n          checked={shouldError}\n          onChange={() => setShouldError(!shouldError)}\n        >\n          {'La nettverkskall feile'}\n        </Checkbox>\n        <FileUploader\n          label={'Last opp et dokument'}\n          acceptedFileFormats={['.pdf', '.jpeg', '.png']}\n          multiple={false}\n          {...fileUploaderState}\n          errorMessage={errorMessage}\n          onFileDelete={onDelete}\n          onFileChange={onChange}\n        />\n      </>\n    );\n  },\n} satisfies Story;\n\nSimpleCompleteExample.parameters = exampleParameters;\n\nexport const Examples: Story = {\n  render: (_args): JSX.Element => {\n    interface MockUploadedFile {\n      href?: string;\n    }\n    const createMockPromises = (\n      amount: number\n    ): Promise<MockUploadedFile>[] => {\n      const promises: Promise<MockUploadedFile>[] = [];\n      for (let i = 0; i < amount; i++) {\n        const promise = new Promise<MockUploadedFile>((resolve, reject) => {\n          if (Math.random() < 0.5) {\n            resolve({ href: 'https://skatteetaten.github.io/designsystemet/' });\n          } else {\n            reject('Promise rejected');\n          }\n        });\n\n        promises.push(promise);\n      }\n      return promises;\n    };\n\n    const [fileUploaderState, setSuccess, setLoading, setFailure, remove] =\n      FileUploader.useFileUploader();\n\n    const [error, setError] = useState<string>();\n    const [shouldMockUpload, setShouldMockUpload] = useState<boolean>(true);\n\n    const uploadUrl = 'http://localhost:9090/test';\n\n    return (\n      <>\n        <Checkbox\n          checked={shouldMockUpload}\n          onChange={() => setShouldMockUpload(!shouldMockUpload)}\n        >\n          {'Bruk mockUpload'}\n        </Checkbox>\n        <FileUploader\n          label={'Dokumentasjon og grunnlag'}\n          helpText={'Trenger du hjelp?'}\n          acceptedFileFormats={['.pdf', '.jpeg', '.png']}\n          invalidCharacterRegexp={/e/g}\n          shouldNormalizeFileName\n          {...fileUploaderState}\n          errorMessage={error ?? ''}\n          multiple\n          onFileDelete={async (file): Promise<boolean> => {\n            await new Promise((_) => setTimeout(_, 1500));\n            if (shouldMockUpload) {\n              remove(file);\n              return true;\n            }\n            let deleteStatus = true;\n\n            await fetch(uploadUrl, {\n              method: 'DELETE',\n            }).then((response) => {\n              if (!response.ok) {\n                deleteStatus = false;\n              } else {\n                remove(file);\n              }\n            });\n            return deleteStatus;\n          }}\n          onFileChange={async (files: File[]): Promise<void> => {\n            setLoading();\n            setError('');\n            if (files.some((file) => file.size > 900_000)) {\n              setError('Filen er for stor eller noe');\n              return;\n            }\n\n            const succeeded: Array<UploadedFile> = [];\n            const failed: Array<{ name: string; reason: string; id?: string }> =\n              [];\n\n            let uploadPromises: Promise<MockUploadedFile>[] = [];\n\n            if (shouldMockUpload) {\n              uploadPromises = createMockPromises(files.length);\n            } else {\n              uploadPromises = files.map((file) =>\n                fetch(uploadUrl, {\n                  method: 'POST',\n                  body: file,\n                }).then((response) => {\n                  console.log(response);\n                  if (!response.ok) {\n                    return Promise.reject(response);\n                  }\n                  return response.json();\n                })\n              );\n            }\n\n            const results = await Promise.allSettled(uploadPromises);\n\n            results.forEach((result, index) => {\n              if (result.status === 'fulfilled') {\n                console.log('FULLLFILLED', result);\n                succeeded.push({\n                  name: files[index].name,\n                  href: result.value.href,\n                  id: Math.random().toString(36).substring(2, 10),\n                });\n              } else if (result.status === 'rejected') {\n                console.log('REJECT', result);\n                failed.push({\n                  name: files[index].name,\n                  reason: result.reason.statusText,\n                  id: Math.random().toString(36).substring(2, 10),\n                });\n              }\n            });\n\n            if (failed.length) {\n              const error = `${failed.length} av ${files.length} filer ble ikke lastet Opp`;\n              setFailure(\n                failed.map(({ name, reason }) => ({\n                  name,\n                  errorMessage: reason,\n                })),\n                [\n                  {\n                    error,\n                    files: failed.map(({ name, id }) => ({\n                      name,\n                      id,\n                    })),\n                  },\n                ],\n                succeeded\n              );\n            } else {\n              setSuccess(succeeded);\n            }\n          }}\n        ></FileUploader>\n      </>\n    );\n  },\n} satisfies Story;\nExamples.parameters = exampleParameters;\n"],"names":["meta","component","FileUploader","title","argTypes","classNames","table","category","props","acceptedFileFormatsDisplay","description","fileIconTitle","errorMessage","helpSvgPath","options","Object","keys","SystemSVGPaths","mapping","defaultValue","summary","helpText","hideLabel","invalidCharacterRegexp","control","isUploading","label","acceptedFileFormats","shouldNormalizeFileName","showRequiredMark","successIconTitle","titleHelpSvg","dsI18n","t","uploadedFiles","uploadResult","multiple","htmlAttribute","children","acceptedFileFormatsDescription","onFileDelete","event","onFileDownload","onFileChange","onHelpToggle","args","name","href","file","console","log","Preview","mockFetch","feil","Promise","r","setTimeout","Response","json","status","mockUpload","_any","mockDelete","SimpleCompleteExample","render","_args","fileUploaderState","setSuccess","setLoading","setFailure","remove","useFileUploader","shouldError","setShouldError","useState","setErrorMessage","onDelete","ok","onChange","files","length","reject","error","jsxs","Fragment","jsx","Checkbox","parameters","exampleParameters","Examples","createMockPromises","amount","promises","i","promise","resolve","Math","random","push","setError","shouldMockUpload","setShouldMockUpload","uploadUrl","_","deleteStatus","fetch","method","then","response","some","size","succeeded","failed","uploadPromises","map","body","allSettled","forEach","result","index","value","id","toString","substring","reason","statusText","docs","source","originalSource"],"mappings":"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"}