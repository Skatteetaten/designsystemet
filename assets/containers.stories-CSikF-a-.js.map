{"version":3,"file":"containers.stories-CSikF-a-.js","sources":["../../../../apps/ds-playground/src/stories/designtokens/containers.stories.tsx"],"sourcesContent":["import { JSX } from 'react';\n\nimport { StoryObj } from '@storybook/react';\n\nimport containersJson from '@skatteetaten/ds-core-designtokens/designtokens/containers.json';\nimport { Table } from '@skatteetaten/ds-table';\nimport { Paragraph } from '@skatteetaten/ds-typography';\n\nimport { TokensList } from './TokensList';\n\nexport default {\n  title: 'Designtokens/Containers',\n};\n\ninterface Breakpoint {\n  name: string;\n  query: string;\n}\n\nconst rootQuery = ':root,\\n  :host';\nconst breakpoints: Breakpoint[] = [\n  { name: 'Breakpoint S', query: '@media (width >= 640px)' },\n  { name: 'Breakpoint M', query: '@media (width >= 1024px)' },\n  { name: 'Breakpoint L', query: '@media (width >= 1366px)' },\n];\n\nconst containersJsonTyped: any = containersJson;\n\nconst generateTableRows = (\n  tokens: Record<string, string>,\n  breakpoints: Breakpoint[],\n  category: string,\n  start: number,\n  end: number\n): JSX.Element[] => {\n  return Object.keys(tokens)\n    .map((key, index) => (\n      <Table.Row key={key}>\n        {index === start && (\n          <Table.DataCell rowSpan={Math.floor(end - start)}>\n            <strong>{category}</strong>\n          </Table.DataCell>\n        )}\n        <Table.DataCell className={'rowLeftBorder'}>\n          <strong>{key}</strong>\n        </Table.DataCell>\n        <Table.DataCell className={'rowLeftBorder'}>\n          {tokens[key]}\n        </Table.DataCell>\n        {breakpoints.map((breakpoint) => (\n          <Table.DataCell\n            key={breakpoint.name}\n            className={`${containersJsonTyped[breakpoint.query][rootQuery][key] ? 'rowLeftBorder' : ''} ${breakpoint.name === 'Breakpoint L' ? 'rowRightBorder' : ''}`}\n          >\n            {containersJsonTyped[breakpoint.query][rootQuery][key] || ''}\n          </Table.DataCell>\n        ))}\n      </Table.Row>\n    ))\n    .slice(start, end);\n};\n\nexport const Containers: StoryObj = {\n  render: () => {\n    const responsiveTokens = Object.fromEntries(\n      Object.entries(containersJson[':root,\\n:host']).filter(([key, _value]) =>\n        key.includes('responsive')\n      )\n    );\n    return (\n      <>\n        <TokensList tokenType={'containers'} />\n        <Paragraph>\n          {'Når dynamiske container-tokens endres fra utgangspunktet (mobile):'}\n        </Paragraph>\n        <Table\n          caption={\n            'Når dynamiske container-tokens endres fra utgangspunktet (mobile)'\n          }\n          variant={'compact'}\n        >\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell colSpan={2}>{''}</Table.HeaderCell>\n              <Table.HeaderCell className={'noWrap'}>\n                {'Mobile/Breakpoint XS'}\n              </Table.HeaderCell>\n              {breakpoints.map((breakpoint) => (\n                <Table.HeaderCell key={breakpoint.name} className={'noWrap'}>\n                  {breakpoint.name}\n                </Table.HeaderCell>\n              ))}\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {generateTableRows(responsiveTokens, breakpoints, 'External', 0, 3)}\n            {generateTableRows(responsiveTokens, breakpoints, 'Internal', 3, 8)}\n          </Table.Body>\n        </Table>\n      </>\n    );\n  },\n  parameters: {\n    previewTabs: {\n      canvas: {\n        hidden: true,\n      },\n    },\n    viewMode: 'docs',\n  },\n};\n"],"names":["ContainersStories","title","rootQuery","breakpoints","name","query","containersJsonTyped","containersJson","generateTableRows","tokens","category","start","end","Object","keys","map","key","index","jsxs","Table","jsx","Math","floor","breakpoint","slice","Containers","render","responsiveTokens","fromEntries","entries","filter","_value","includes","Fragment","TokensList","Paragraph","parameters","previewTabs","canvas","hidden","viewMode","docs","source","originalSource"],"mappings":"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"}